{"version":3,"file":"validate.min.js","sources":["../util.js","../validate.js"],"sourcesContent":["/**\n * Read a property, attribute or data-attribute of an element\n *\n * @param {JQuery<HTMLElement>} $elem\n * @param {String} prop\n *\n * @return {any}\n */\nexport function read_pratr($elem, prop) {\n    let ret = $elem.prop(prop);\n    if (ret === \"\" || ret == null || typeof ret == \"object\")\n        ret = $elem.attr(prop);\n    if (ret === \"\" || ret == null)\n        ret = $elem.data(prop);\n    return ret;\n}\n/**\n * Get element's name from either attribute or data-attribute\n *\n * @param  {JQuery<HTMLElement>} $elem\n *\n * @return {String}\n */\nexport function getName($elem) {\n    return $elem.attr(\"name\") || $elem.data(\"name\");\n}\n// ---------------------------------------------------------------------------\nconst _eq_r_ = /[\\\\'\"]/g; // Escape for use inside quotes \" | '\nconst _is_url_r_ = /^[a-z]{3,7}\\:\\/\\/[a-z0-9]/i;\nconst _is_domain_r_ = /^[a-z0-9][0-9a-z_\\-]*(?:\\.[a-z0-9][0-9a-z_\\-]*)*$/;\nconst _is_email_r_ = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n// - String validation functions -\nexport function esc_quot(str) {\n    return String(str).replace(_eq_r_, \"\\\\$&\");\n}\nexport function is_domain(str) {\n    return _is_domain_r_.test(str);\n}\nexport function is_url(str) {\n    return _is_url_r_.test(str);\n}\nexport function is_email(str) {\n    return _is_email_r_.test(str);\n}\n// ---------------------------------------------------------------------------\n/**\n * 4-10 times faster .each replacement\n * use it carefully, as it overrides jQuery context of element on each iteration\n *\n * function clb.call(DOM, idx, $DOM, DOM) {};\n *    $DOM == $(DOM), is the same object throughout iteration\n *\n */\nexport function $each($list, iterator) {\n    const l = $list.length;\n    const j = l > 1 ? $list.constructor([0]) : $list;\n    let i = -1, d;\n    while (++i < l &&\n        (j[0] = d = $list[i]) &&\n        (!i || (j.context = d)) && // .context is deprecated in jQuery v1.10\n        // clb.call(\"this\"=DOM, i=index, j=jQuery object, d=DOM)\n        iterator.call(d, i, j, d) !== false)\n        ;\n    return $list;\n}\n// ---------------------------------------------------------------------------\nexport const isEventSupported = (function (_doc) {\n    const TAGNAMES = {\n        select: \"input\",\n        change: \"input\",\n        submit: \"form\",\n        reset: \"form\",\n        error: \"img\",\n        load: \"img\",\n        abort: \"img\",\n    };\n    function isEventSupported(eventName, document = _doc) {\n        let el = document.createElement(TAGNAMES[eventName] || \"div\");\n        eventName = \"on\" + eventName;\n        let isSupported = eventName in el;\n        if (!isSupported) {\n            el.setAttribute(eventName, \"return;\");\n            isSupported = typeof el[eventName] == \"function\";\n        }\n        el = null;\n        return isSupported;\n    }\n    return isEventSupported;\n})(window.document);\n// ---------------------------------------------------------------------------\n","/**\n * Form validation plugin.\n *\n * @author Dumitru Uzun (https://DUzun.Me)\n * @version 1.3.0\n */\nimport { esc_quot, is_domain, is_email, is_url, getName, read_pratr, $each, } from \"./util\";\n/*globals Promise*/\nconst STRING = \"string\";\nconst NUMBER = \"number\";\nconst FUNCTION = \"function\";\nconst VALID = \"valid\";\nconst INVALID = \"invalid\";\nconst NS = \".vldtr\";\nexport default function jquery_validate($) {\n    // ---------------------------------------------------------------------------\n    $.fn.validator = fnValidator;\n    $.fn.validate = fnValidate;\n    $.validate = validate;\n    // ---------------------------------------------------------------------------\n    fnValidator.handler = handler;\n    validate.readRules = readRules;\n    validate.msg = msg;\n    // ---------------------------------------------------------------------------\n    validate.defaults = {\n        valid: undefined,\n        hintElement: undefined,\n        fieldGroup: undefined,\n        validClass: VALID,\n        invalidClass: INVALID,\n        rules: {},\n        messages: {\n            // Default messages\n            //      _: { fieldName: 'message' }\n            _: {\n                email: \"Email is not correct\",\n                url: \"Not a valid URL\",\n                number: \"Not a valid number\",\n                required: \"%f% is required\",\n                equalto: `Fields don't match`,\n                minlength: \"%f% must be %r% characters or more\",\n                maxlength: \"%f% must be no more then %r% characters\",\n            },\n            // Field specific messages\n            //      fieldName: { ruleName: 'message' }\n            password: {\n                required: \"Password is required\",\n                equalto: `Passwords don't match`,\n            },\n            password2: {\n                equalto: `Passwords don't match`,\n            },\n        },\n    };\n    // ---------------------------------------------------------------------------\n    $.extend(validate, {\n        // Expose validation functions:\n        is_domain,\n        is_url,\n        is_email,\n        getName,\n    });\n    // ---------------------------------------------------------------------------\n    function fnValidator(options, _rules, _silent) {\n        const self = this;\n        const on = [\n            \"keyup\",\n            \"input\",\n            \"blur\",\n            \"focusout\",\n            \"change\",\n            \"paste\",\n            \"cut\",\n            \"validate\",\n        ], ev = on.join(NS + \" \") + NS;\n        if (typeof options == STRING) {\n            switch (options) {\n                case \"validate\":\n                    return $.fn.validate.call(self, _rules, _silent);\n                case \"refresh\":\n                    return _form_refresh.call(self);\n                case \"off\":\n                    return self.off(ev, $.fn.validator.handler);\n                case \"on\":\n                    return self.on(ev, $.fn.validator.handler);\n            }\n        }\n        options = _prepOptions(options);\n        $each(self, function (i, $form) {\n            const validatorOpt = $.extend(true, { _invalids: {} /*, _origs:{}*/ }, options, $form.data(\"validatorOpt\") || {});\n            $form\n                .on(\"dom:update\", _form_refresh) // when DOM is manipulated, refresh form\n                .on(ev, $.fn.validator.handler)\n                .data(\"validatorOpt\", validatorOpt);\n        })\n            .attr(\"novalidate\", \"novalidate\");\n        _form_refresh.call(self, undefined, true);\n        return self;\n    }\n    function handler(evt) {\n        const self = this, $this = $(this), target = (evt && evt.target) || self, $target = $(target), name = getName($target), toName = \"_to_\" + name;\n        let validatorOpt = $this.data(\"validatorOpt\"), delay = 17, to;\n        if (!name || !$target.is(\":input\"))\n            return;\n        if (validatorOpt) {\n            to = validatorOpt[toName];\n        }\n        else {\n            $this.data(\"validatorOpt\", (validatorOpt = {}));\n        }\n        let type = evt && evt.type;\n        if (type)\n            switch (type) {\n                case \"input\": // invoked at keydown (if supported) or any other kind of input\n                case \"keyup\":\n                    delay = 250; // typing\n                    break;\n                case \"validate\":\n                case \"focusout\":\n                case \"blur\":\n                    delay = 0; // done from this input\n                    break;\n            }\n        // Debounce validation\n        if (to)\n            clearTimeout(to);\n        validatorOpt[toName] = to = setTimeout(function () {\n            let rule = validatorOpt.rules;\n            if (rule)\n                rule = rule[name];\n            $.validate(target, rule, (valid, ret) => {\n                _on_validate(target, valid, ret, rule, {\n                    $tgt: $target,\n                    $ctx: $this,\n                    opt: validatorOpt,\n                    evt,\n                    name,\n                });\n            }, $this);\n            delete validatorOpt[toName];\n        }, delay);\n    }\n    // ---------------------------------------------------------------------------\n    /**\n     *  Validate an element.\n     *\n     *  @param (callback) clb.call($elem, (bool)valid, (str)rulename, value, (obj)rules)\n     */\n    function validate(element, rules, clb, ctx, options) {\n        const $elem = $(element);\n        const valResAttr = \"validatorRes\";\n        let oldVal = $elem.val(), val = oldVal, t, ruleName, cause = $elem.data(INVALID), _state_ = {\n        // rules: rules,\n        // value: val,\n        // valid: true,\n        }, _res = function (valid) {\n            $elem.data(valResAttr, _state_).prop(VALID, valid);\n            if (typeof clb == FUNCTION) {\n                clb.call($elem, valid, _state_);\n            }\n            if ((t = _state_._clbstk_)) {\n                delete _state_._clbstk_;\n                $.each(t, (i, fn) => {\n                    fn.call($elem, valid, _state_);\n                });\n            }\n            return valid;\n        }, _invalidate = function (rule, x) {\n            _state_.rule = rule; // deprecated\n            _state_[INVALID] = rule;\n            _state_[VALID] = false;\n            if (x)\n                _state_.remote = x;\n            $elem.data(INVALID, rule).removeClass(VALID);\n            return _res(false);\n        }, _validate = function (x) {\n            _state_.rule = cause; // deprecated\n            delete _state_[INVALID];\n            _state_[VALID] = true;\n            if (x)\n                _state_.remote = x;\n            $elem.data(INVALID, null).removeClass(INVALID);\n            return _res(true);\n        }, last_ret;\n        if (!rules) {\n            rules = $.validate.readRules($elem);\n            // Ignore last_res for custom rules\n            last_ret = $elem.data(valResAttr);\n        }\n        if (last_ret && !rules[\"equalto\"] && !rules[\"dynamic\"]) {\n            if (last_ret.value === val) {\n                _state_ = last_ret;\n                if (_state_._validating_ &&\n                    $.now() - _state_._validating_ < 3e3) {\n                    if (typeof clb == FUNCTION) {\n                        t = _state_._clbstk_ || (_state_._clbstk_ = []);\n                        t[t.length] = clb;\n                    }\n                }\n                else {\n                    if (_state_[VALID]) {\n                        _validate();\n                    }\n                    else {\n                        _invalidate(_state_[INVALID]);\n                    }\n                }\n                return _state_.valid;\n            }\n        }\n        if (rules[(ruleName = \"trim\")]) {\n            if (typeof val == STRING) {\n                val = $.trim(val);\n            }\n            else if (Array.isArray(val)) {\n                val = val.map($.trim);\n            }\n        }\n        _state_.rules = rules;\n        _state_.value = val;\n        if (rules[(ruleName = \"required\")]) {\n            if (val === \"\") {\n                return _invalidate(ruleName);\n            }\n        }\n        ruleName = \"minlength\";\n        if (ruleName in rules) {\n            if (val !== \"\" && String(val).length < rules[ruleName]) {\n                return _invalidate(ruleName);\n            }\n        }\n        ruleName = \"maxlength\";\n        if (ruleName in rules) {\n            if (-1 < rules[ruleName] && rules[ruleName] < String(val).length) {\n                return _invalidate(ruleName);\n            }\n        }\n        if (rules[(ruleName = \"equalto\")]) {\n            t = $elem.data(\"$\" + ruleName); // cache the elem\n            if (!t || !t.length) {\n                t = $elem.closest(\"form\");\n                if (!t.length)\n                    t = $(\"body\");\n                // element name\n                if (rules[ruleName].match(/^[a-z_]/)) {\n                    t = t.find('[name=\"' + esc_quot(rules[ruleName]) + '\"]');\n                }\n                // jQuery selector\n                else {\n                    t = t.find(rules[ruleName]);\n                }\n                $elem.data(\"$\" + ruleName, t);\n            }\n            if (!t.length || t.val() != val) {\n                return _invalidate(ruleName);\n            }\n        }\n        if (rules[(ruleName = \"noclass\")]) {\n            if ($elem.hasClass(rules[ruleName])) {\n                return _invalidate(ruleName);\n            }\n        }\n        if (rules[(ruleName = \"email\")]) {\n            if (val !== \"\" && !is_email(val)) {\n                return _invalidate(ruleName);\n            }\n        }\n        if (rules[(ruleName = \"url\")]) {\n            if (val !== \"\" && !is_url(val)) {\n                return _invalidate(ruleName);\n            }\n        }\n        if (rules[(ruleName = \"domain\")]) {\n            if (val !== \"\" && !is_domain(val)) {\n                return _invalidate(ruleName);\n            }\n        }\n        if (rules[(ruleName = NUMBER)]) {\n            if (val !== \"\") {\n                if (isNaN(+val)) {\n                    return _invalidate(ruleName);\n                }\n                else {\n                    _state_.value = val = parseFloat(val);\n                }\n            }\n        }\n        ruleName = \"maxval\";\n        if (ruleName in rules) {\n            if (val !== \"\") {\n                t = rules[ruleName];\n                if (typeof val == NUMBER)\n                    t = parseFloat(t);\n                if (t < val) {\n                    return _invalidate(ruleName);\n                }\n            }\n        }\n        ruleName = \"minval\";\n        if (ruleName in rules) {\n            if (val !== \"\") {\n                t = rules[ruleName];\n                if (typeof val == NUMBER)\n                    t = parseFloat(t);\n                if (val < t) {\n                    return _invalidate(ruleName);\n                }\n            }\n        }\n        const asyncs = [];\n        $.each(rules, (ruleName, fn) => {\n            if (fn && typeof fn == FUNCTION && ruleName != \"remote\") {\n                let t = fn.call(_state_, val, $elem, _state_);\n                if (false === t) {\n                    return _invalidate(ruleName);\n                }\n                if ($.type(t) == \"error\") {\n                    _state_.remote = t;\n                    return _invalidate(ruleName);\n                }\n                if (t && t.then) {\n                    t.rule = ruleName;\n                    asyncs.push(t);\n                }\n            }\n        });\n        if (VALID in _state_ && !_state_[VALID])\n            return false;\n        // Server-side validation\n        ruleName = \"remote\";\n        if (ruleName in rules) {\n            let form = ctx ? $(ctx) : $elem.closest(\"form\"), fieldName = getName($elem), data = { action: \"validate\", field: fieldName, value: val }, url = rules[ruleName];\n            ctx = form;\n            if (form.length) {\n                data.form = getName(form);\n            }\n            else {\n                form = null;\n            }\n            if (typeof url == FUNCTION) {\n                url = url.call($elem, data, _state_);\n                if (url === false) {\n                    return _invalidate(ruleName);\n                    return;\n                }\n                if ($.isPlainObject(url)) {\n                    data = url;\n                    url = data.url;\n                    delete data.url;\n                }\n            }\n            if (!url)\n                url = form || location.href;\n            const xhr = $.when($.ajax({\n                url,\n                data,\n                method: \"post\",\n                dataType: \"json\",\n            }))\n                // back-end result must contain { ok: true }, otherwise it is invalid\n                .then((dt) => {\n                if (!dt || !dt.ok) {\n                    return Promise.reject(dt);\n                }\n            });\n            asyncs.push(xhr);\n        }\n        // Async validation\n        if (asyncs.length) {\n            _state_._validating_ = $.now();\n            $elem.data(valResAttr, _state_);\n            oldVal = $elem.val();\n            let _valid = true;\n            let promise = new Promise((resolve, reject) => {\n                $.each(asyncs, (idx, x) => {\n                    x.then((dt) => {\n                        if (!_valid)\n                            return;\n                        _state_.remote = dt;\n                        if (oldVal == $elem.val()) {\n                            let rs = _state_.remotes || (_state_.remotes = {});\n                            rs[x.rule] = dt;\n                        }\n                    }, (error) => {\n                        _valid = false;\n                        _state_.remote = error;\n                        if (oldVal == $elem.val()) {\n                            _invalidate(x.rule, error);\n                        }\n                        reject(error);\n                    });\n                });\n                Promise.all(asyncs).then((all) => {\n                    if (!_valid)\n                        return;\n                    if (oldVal == $elem.val()) {\n                        _validate();\n                    }\n                    resolve(all);\n                }, $.noop); // this reject is irelevant, because we catch each individual promise\n            });\n            const _done = () => {\n                delete _state_._validating_;\n            };\n            promise.then(_done, _done);\n            return promise;\n        }\n        return _validate();\n    }\n    // ---------------------------------------------------------------------------\n    function readRules(element, rules) {\n        if (!(element instanceof $))\n            element = $(element);\n        let _rules = element.data(\"validation-rules\");\n        if (!_rules) {\n            _rules = {};\n            var type = read_pratr(element, \"type\");\n            if (element.hasClass(\"trim\"))\n                _rules[\"trim\"] = true;\n            $.each([\"email\", \"url\", \"domain\", NUMBER], function (t, r) {\n                t = read_pratr(element, r);\n                if (t == null && type == r) {\n                    t = true;\n                }\n                if (t != undefined)\n                    _rules[r] = t;\n            });\n            if (_rules.email)\n                _rules.maxlength = 320;\n            $.each([\"minlength\", \"maxlength\", \"trim\"], function (t, r) {\n                t = read_pratr(element, r);\n                if (t != undefined && -1 < (t = parseInt(t)))\n                    _rules[r] = t;\n            });\n            $.each([\n                \"minval\",\n                \"maxval\",\n                \"required\",\n                \"equalto\",\n                \"noclass\",\n                \"remote\",\n            ], function (t, r) {\n                t = read_pratr(element, r);\n                if (t != undefined)\n                    _rules[r] = t;\n            });\n            if (type == NUMBER) {\n                $.each({ min: \"minval\", max: \"maxval\" }, function (t, r) {\n                    if (!(r in _rules)) {\n                        t = read_pratr(element, t);\n                        if (t != undefined)\n                            _rules[r] = parseFloat(t);\n                    }\n                });\n            }\n            element.data(\"validation-rules\", _rules);\n        }\n        $.extend(rules || (rules = {}), _rules);\n        return rules;\n    }\n    function msg(ruleName, fieldName, options, rule, placeholder) {\n        options = _prepOptions(options);\n        const { messages } = options;\n        let message;\n        ((message = messages[fieldName]) && (message = message[ruleName])) ||\n            ((message = messages._) && (message = message[ruleName]));\n        if (message) {\n            if (!rule)\n                (rule = options.rules) && (rule = rule[fieldName]);\n            let field = placeholder || fieldName.toUCFirst();\n            let ruleValue = rule[ruleName];\n            message = message.replace(/%f%/g, `\"${field}\"`);\n            if (placeholder != undefined) {\n                message = message.replace(/%p%/g, placeholder);\n            }\n            if (ruleValue != undefined) {\n                message = message.replace(/%r%/g, ruleValue);\n            }\n        }\n        return message;\n    }\n    // ---------------------------------------------------------------------------\n    function fnValidate(rules, silent) {\n        $.validate(this, rules, function (valid, ret) {\n            if (!silent) {\n                _on_validate(this, valid, ret, rules, {});\n            }\n        });\n        return this;\n    }\n    // ---------------------------------------------------------------------------\n    function _form_refresh(evt, _init) {\n        // log('validator:form_refresh', this, evt);\n        const self = evt ? $(this) : this;\n        return $each(self, function (i, $form, d) {\n            const options = $form.data(\"validatorOpt\");\n            if (!$form.is(\":input\")) {\n                const $elements = $form.find(\"[name]:input,[data-name]:input\"), _invalids = options._invalids, elByName = {};\n                let has_inv;\n                $each($elements, function (t, $element) {\n                    const fieldName = getName($element);\n                    // disabled elements don't get validated (they are not sent to server anyways)\n                    if ($element.prop(\"disabled\")) {\n                        if (fieldName && _invalids)\n                            delete _invalids[fieldName]; // in the case it became invalid\n                        return;\n                    }\n                    if (fieldName) {\n                        elByName[fieldName] = $element[0];\n                        const rule = $.validate.readRules($element, options.rules[fieldName]);\n                        $element.data(\"_orig_val_\") != undefined ||\n                            $element.data(\"_orig_val_\", $element.val());\n                        if (rule && !$.isEmptyObject(rule)) {\n                            options.rules[fieldName] = rule;\n                            const valid = $.validate($element, rule);\n                            if (valid) {\n                                delete _invalids[fieldName];\n                            }\n                            else {\n                                has_inv = !valid;\n                                t = _invalids[fieldName] || (_invalids[fieldName] = {});\n                                t[$element.data(\"invalid\")] = $element.val();\n                            }\n                        }\n                    }\n                });\n                // unmark invalid elements that are no longer present in DOM or are disabled\n                $.each(_invalids, function (n) {\n                    if (!elByName[n]) {\n                        delete _invalids[n];\n                    }\n                });\n                // First trigger\n                options.valid = has_inv;\n                setTimeout(function () {\n                    _form_state_trigger($(d), options);\n                }, 10);\n            }\n        });\n    }\n    function _form_state_trigger(form, opt, valid) {\n        // if valid state changed\n        if (!opt)\n            opt = form.data(\"validatorOpt\");\n        if (valid == null)\n            valid = $.isEmptyObject(opt._invalids);\n        if (!opt.valid !== !valid) {\n            opt.valid = valid;\n            typeof form.prop(\"valid\") == \"object\" || form.prop(\"valid\", valid);\n            if (valid) {\n                form.removeClass(INVALID);\n                form.trigger(\"valid:form\", [opt]);\n            }\n            else {\n                form.addClass(INVALID).removeClass(VALID);\n                form.trigger(\"invalid:form\", [opt]);\n            }\n        }\n        return opt.valid;\n    }\n    function _on_validate(tgt, valid, ret, rules, params) {\n        let _evt = new $.Event(valid ? VALID : INVALID), rn = ret.invalid, $tgt = params.$tgt || $(tgt), $ctx = params.$ctx || $tgt.closest(\"form\"), name = params.name || getName($tgt), // hidden name\n        validatorOpt = params.opt || $ctx.data(\"validatorOpt\"), t;\n        $.extend(_evt, ret);\n        _evt.field = name;\n        if (validatorOpt)\n            _evt.options = validatorOpt;\n        if ((t = params.evt))\n            _evt.src_evt = t;\n        if (valid) {\n            if ((t = ret.remote && ret.remote.success)) {\n                if (typeof t == STRING) {\n                    _evt.message = t;\n                }\n            }\n            $tgt.removeClass(INVALID).addClass(VALID);\n        }\n        else {\n            if ((t = ret.remote)) {\n                _evt.message =\n                    (t && (t.msg || t.message || t.description)) || t;\n            }\n            else {\n                var placeholder = read_pratr($tgt, \"placeholder\"); // hidden placeholder\n                _evt.message = $.validate.msg(rn, name, validatorOpt, rules || ret.rules, placeholder);\n            }\n            $tgt.removeClass(VALID).addClass(INVALID);\n        }\n        let $fieldGroup;\n        if ((t = validatorOpt.fieldGroup)) {\n            $fieldGroup = $tgt.closest(t);\n            $fieldGroup\n                .removeClass(!valid ? VALID : INVALID)\n                .addClass(valid ? VALID : INVALID);\n        }\n        if ((t = validatorOpt.hintElement)) {\n            let $hintElement = $tgt.next(t);\n            if (!$hintElement.length) {\n                $hintElement = $tgt.prev(t);\n            }\n            if (!$hintElement.length) {\n                $hintElement = $tgt.siblings(t).first();\n            }\n            if (!$hintElement.length && $fieldGroup) {\n                $hintElement = $fieldGroup.find(t);\n            }\n            if ($hintElement) {\n                if (valid) {\n                    $hintElement.text(\"\").hide();\n                }\n                else {\n                    _evt.message && $hintElement.text(_evt.message).show();\n                }\n            }\n        }\n        $tgt.trigger(_evt, [_evt.message, rn]);\n        if (valid && !$tgt.is(\":focus\")) {\n            var form = $ctx.is(\":input\") ? $ctx.closest(\"form\") : $ctx, eq = form.find('[equalto=\"' + esc_quot(name) + '\"]');\n            if ((t = $tgt.attr(\"id\")))\n                eq = eq.add(form.find('[equalto=\"#' + esc_quot(name) + '\"]'));\n            eq.length && eq.trigger(\"validate\");\n        }\n        if (valid) {\n            delete validatorOpt._invalids[name];\n            if (!validatorOpt.valid) {\n                _form_state_trigger($ctx, validatorOpt);\n            }\n        }\n        else {\n            t =\n                validatorOpt._invalids[name] ||\n                    (validatorOpt._invalids[name] = {});\n            t[rn] = ret.value;\n            _form_state_trigger($ctx, validatorOpt, valid);\n        }\n    }\n    function _prepOptions(options) {\n        return $.isPlainObject(options)\n            ? $.extend(true, {}, $.validate.defaults, options)\n            : $.validate.defaults;\n    }\n    // ---------------------------------------------------------------------------\n    return $.validate;\n}\n(function (window) {\n    const $ = window && (window.jQuery || window.Zepto);\n    if ($)\n        jquery_validate($);\n})(typeof globalThis == \"undefined\"\n    ? typeof window == \"undefined\"\n        ? undefined\n        : window\n    : globalThis);\n"],"names":["read_pratr","$elem","prop","ret","_typeof","attr","data","getName","_eq_r_","_is_url_r_","_is_domain_r_","_is_email_r_","esc_quot","str","String","replace","is_domain","test","is_url","is_email","$each","$list","iterator","d","l","length","j","constructor","i","context","call","STRING","NUMBER","FUNCTION","VALID","INVALID","NS","jquery_validate","$","fnValidator","options","_rules","_silent","self","this","ev","join","fn","validate","_form_refresh","off","validator","handler","on","_prepOptions","$form","validatorOpt","extend","_invalids","undefined","element","rules","clb","ctx","t","ruleName","last_ret","valResAttr","oldVal","val","cause","_state_","_res","valid","_clbstk_","each","_invalidate","rule","x","remote","removeClass","_validate","readRules","value","_validating_","now","trim","Array","isArray","map","closest","match","find","hasClass","isNaN","parseFloat","asyncs","type","then","push","form","action","field","url","isPlainObject","location","href","xhr","when","ajax","method","dataType","dt","ok","Promise","reject","_valid","promise","resolve","idx","remotes","error","all","noop","_done","evt","_init","is","has_inv","$elements","elByName","$element","fieldName","isEmptyObject","n","setTimeout","_form_state_trigger","opt","trigger","addClass","_on_validate","tgt","params","$fieldGroup","_evt","Event","rn","invalid","$tgt","$ctx","name","src_evt","success","message","msg","description","placeholder","fieldGroup","hintElement","$hintElement","next","prev","siblings","first","text","hide","show","eq","add","defaults","silent","to","$this","target","$target","toName","delay","clearTimeout","r","email","maxlength","parseInt","min","max","messages","_","toUCFirst","ruleValue","validClass","invalidClass","number","required","equalto","minlength","password","password2","window","jQuery","Zepto","globalThis"],"mappings":"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"}